#!/usr/bin/env node

/**
 * Script de diagnostic complet pour les notifications push
 */

import db from './src/config/db.js';
import webpush from 'web-push';

async function diagnosePushSystem() {
  console.log('üîç DIAGNOSTIC COMPLET DU SYST√àME PUSH\n');

  try {
    // 1. V√©rifier les variables d'environnement
    console.log('üìã 1. VARIABLES D\'ENVIRONNEMENT:');
    console.log(`VAPID_PUBLIC_KEY: ${process.env.VAPID_PUBLIC_KEY ? '‚úÖ D√©finie' : '‚ùå Manquante'}`);
    console.log(`VAPID_PRIVATE_KEY: ${process.env.VAPID_PRIVATE_KEY ? '‚úÖ D√©finie' : '‚ùå Manquante'}`);
    console.log(`VAPID_SUBJECT: ${process.env.VAPID_SUBJECT || '‚ùå Manquante'}`);
    
    if (process.env.VAPID_PUBLIC_KEY) {
      console.log(`Cl√© publique: ${process.env.VAPID_PUBLIC_KEY.substring(0, 20)}...`);
    }

    // 2. Tester la configuration VAPID
    console.log('\nüîë 2. TEST CONFIGURATION VAPID:');
    try {
      webpush.setVapidDetails(
        process.env.VAPID_SUBJECT || 'mailto:admin@insti.edu',
        process.env.VAPID_PUBLIC_KEY,
        process.env.VAPID_PRIVATE_KEY
      );
      console.log('‚úÖ Configuration VAPID valide');
    } catch (vapidError) {
      console.log(`‚ùå Erreur VAPID: ${vapidError.message}`);
    }

    // 3. V√©rifier les abonnements en base
    console.log('\nüìä 3. ABONNEMENTS EN BASE DE DONN√âES:');
    const { rows: subscriptions } = await db.query(`
      SELECT 
        id, 
        utilisateur_id, 
        endpoint, 
        created_at, 
        updated_at, 
        is_active,
        SUBSTRING(p256dh_key, 1, 20) as p256dh_preview,
        SUBSTRING(auth_key, 1, 20) as auth_preview
      FROM push_subscriptions 
      ORDER BY created_at DESC
    `);

    console.log(`Nombre d'abonnements: ${subscriptions.length}`);
    
    if (subscriptions.length > 0) {
      subscriptions.forEach((sub, index) => {
        console.log(`\n${index + 1}. Abonnement ID: ${sub.id}`);
        console.log(`   Utilisateur: ${sub.utilisateur_id}`);
        console.log(`   Actif: ${sub.is_active ? '‚úÖ' : '‚ùå'}`);
        console.log(`   Endpoint: ${sub.endpoint.substring(0, 60)}...`);
        console.log(`   Cr√©√©: ${sub.created_at}`);
        console.log(`   Mis √† jour: ${sub.updated_at}`);
        console.log(`   P256DH: ${sub.p256dh_preview}...`);
        console.log(`   Auth: ${sub.auth_preview}...`);
      });
    }

    // 4. Recommandations
    console.log('\nüí° 4. RECOMMANDATIONS:');
    
    if (subscriptions.length === 0) {
      console.log('‚úÖ Aucun abonnement - Parfait pour un nouveau test');
    } else if (subscriptions.length === 1) {
      console.log('‚ö†Ô∏è 1 abonnement trouv√© - Si erreur VAPID, supprimez-le');
      console.log('   Commande: npm run clean:push');
    } else {
      console.log(`‚ö†Ô∏è ${subscriptions.length} abonnements trouv√©s - Nettoyage recommand√©`);
      console.log('   Commande: npm run clean:push');
    }

    // 5. Test de cl√© VAPID
    console.log('\nüß™ 5. TEST CL√âS VAPID:');
    if (process.env.VAPID_PUBLIC_KEY) {
      const publicKey = process.env.VAPID_PUBLIC_KEY;
      
      // V√©rifier la longueur (doit √™tre 87 caract√®res pour P-256)
      if (publicKey.length === 87) {
        console.log('‚úÖ Longueur cl√© publique correcte (87 caract√®res)');
      } else {
        console.log(`‚ùå Longueur cl√© publique incorrecte: ${publicKey.length} (attendu: 87)`);
      }
      
      // V√©rifier qu'elle commence par 'B' (format non compress√© P-256)
      if (publicKey.startsWith('B')) {
        console.log('‚úÖ Format cl√© publique correct (commence par B)');
      } else {
        console.log(`‚ùå Format cl√© publique incorrect (commence par ${publicKey[0]})`);
      }
    }

    console.log('\nüéØ PROCHAINES √âTAPES:');
    console.log('1. Si des abonnements existent: npm run clean:push');
    console.log('2. Red√©marrer les serveurs: npm run restart:pwa');
    console.log('3. Tester "Reset Push" dans l\'interface');
    console.log('4. Puis tester "Test Push"');

  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
  } finally {
    await db.closePool();
  }
}

// Ex√©cuter le diagnostic
diagnosePushSystem();
