// Script de diagnostic pour tester la base de donn√©es sur Vercel
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

const testDatabase = async () => {
  console.log('üîç D√©but du diagnostic de la base de donn√©es...\n');

  try {
    // Import dynamique de la configuration DB
    const dbModule = await import('./src/config/db.js');
    const db = dbModule.default;

    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');

    // Test 1: V√©rifier les tables principales
    console.log('\nüìã Test 1: V√©rification des tables principales...');
    
    const tables = [
      'utilisateurs',
      'filieres', 
      'stages',
      'entreprises',
      'propositions_stages',
      'projets_realises',
      'administrateurs'
    ];

    for (const table of tables) {
      try {
        const result = await db.query(`SELECT COUNT(*) FROM public.${table}`);
        console.log(`   ‚úÖ Table ${table}: ${result.rows[0].count} enregistrements`);
      } catch (error) {
        console.log(`   ‚ùå Table ${table}: ERREUR - ${error.message}`);
      }
    }

    // Test 2: V√©rifier les donn√©es des fili√®res
    console.log('\nüìä Test 2: Donn√©es des fili√®res...');
    try {
      const { rows: filieres } = await db.query('SELECT * FROM public.filieres ORDER BY nom');
      console.log(`   ‚úÖ ${filieres.length} fili√®res trouv√©es:`);
      filieres.forEach(f => console.log(`      - ${f.nom} (ID: ${f.id})`));
    } catch (error) {
      console.log(`   ‚ùå Erreur fili√®res: ${error.message}`);
    }

    // Test 3: V√©rifier les √©tudiants par fili√®re
    console.log('\nüë• Test 3: √âtudiants par fili√®re...');
    try {
      const { rows: stats } = await db.query(`
        SELECT 
          f.nom as filiere,
          COUNT(u.id) as count
        FROM public.filieres f
        LEFT JOIN public.utilisateurs u ON f.id = u.filiere_id AND u.role = 'etudiant'
        GROUP BY f.id, f.nom
        ORDER BY f.nom
      `);
      
      console.log(`   ‚úÖ Statistiques par fili√®re:`);
      stats.forEach(s => console.log(`      - ${s.filiere}: ${s.count} √©tudiants`));
      
      // V√©rifier si on a des donn√©es pour le dashboard
      if (stats.length === 0) {
        console.log('   ‚ö†Ô∏è  PROBL√àME: Aucune donn√©e pour les statistiques par fili√®re');
      }
    } catch (error) {
      console.log(`   ‚ùå Erreur stats fili√®res: ${error.message}`);
    }

    // Test 4: V√©rifier les projets r√©alis√©s
    console.log('\nüöÄ Test 4: Projets r√©alis√©s...');
    try {
      const { rows: projets } = await db.query(`
        SELECT 
          pr.*,
          u.nom as etudiant_nom,
          u.prenom as etudiant_prenom,
          f.nom as nom_filiere
        FROM public.projets_realises pr
        LEFT JOIN public.utilisateurs u ON pr.etudiant_id = u.id
        LEFT JOIN public.filieres f ON u.filiere_id = f.id
        ORDER BY pr.created_at DESC
        LIMIT 5
      `);
      
      console.log(`   ‚úÖ ${projets.length} projets trouv√©s (5 premiers):`);
      projets.forEach(p => console.log(`      - ${p.titre} par ${p.etudiant_prenom} ${p.etudiant_nom}`));
      
      if (projets.length === 0) {
        console.log('   ‚ö†Ô∏è  PROBL√àME: Aucun projet r√©alis√© trouv√©');
      }
    } catch (error) {
      console.log(`   ‚ùå Erreur projets: ${error.message}`);
    }

    // Test 5: V√©rifier les propositions de th√®mes
    console.log('\nüí° Test 5: Propositions de th√®mes...');
    try {
      // V√©rifier si la table existe
      const tableExists = await db.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name = 'propositions_themes'
        );
      `);
      
      if (tableExists.rows[0].exists) {
        const { rows: propositions } = await db.query(`
          SELECT COUNT(*) as count FROM public.propositions_themes
        `);
        console.log(`   ‚úÖ Table propositions_themes existe: ${propositions[0].count} propositions`);
      } else {
        console.log('   ‚ö†Ô∏è  Table propositions_themes n\'existe pas');
      }
    } catch (error) {
      console.log(`   ‚ùå Erreur propositions: ${error.message}`);
    }

    // Test 6: V√©rifier les statistiques entreprises
    console.log('\nüè¢ Test 6: Statistiques entreprises...');
    try {
      const { rows: entreprises } = await db.query(`
        SELECT 
          e.nom as entreprise,
          COUNT(s.id) as nb_stages
        FROM public.entreprises e
        LEFT JOIN public.stages s ON e.id = s.entreprise_id
        GROUP BY e.id, e.nom
        HAVING COUNT(s.id) > 0
        ORDER BY nb_stages DESC
        LIMIT 5
      `);
      
      console.log(`   ‚úÖ Top 5 entreprises par nombre de stages:`);
      entreprises.forEach(e => console.log(`      - ${e.entreprise}: ${e.nb_stages} stages`));
      
      if (entreprises.length === 0) {
        console.log('   ‚ö†Ô∏è  PROBL√àME: Aucune entreprise avec des stages');
      }
    } catch (error) {
      console.log(`   ‚ùå Erreur stats entreprises: ${error.message}`);
    }

    // Test 7: V√©rifier les activit√©s r√©centes
    console.log('\nüìà Test 7: Activit√©s r√©centes...');
    try {
      // V√©rifier si la table activites existe
      const tableExists = await db.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name = 'activites'
        );
      `);
      
      if (tableExists.rows[0].exists) {
        const { rows: activites } = await db.query(`
          SELECT * FROM public.activites 
          ORDER BY created_at DESC 
          LIMIT 5
        `);
        console.log(`   ‚úÖ ${activites.length} activit√©s r√©centes trouv√©es`);
      } else {
        console.log('   ‚ö†Ô∏è  Table activites n\'existe pas');
      }
    } catch (error) {
      console.log(`   ‚ùå Erreur activit√©s: ${error.message}`);
    }

    console.log('\n‚úÖ Diagnostic termin√©!');

  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
  }
};

// Ex√©cuter le diagnostic
testDatabase().catch(console.error);
