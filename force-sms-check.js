#!/usr/bin/env node

/**
 * Forcer la v√©rification des SMS en attente
 */

import fetch from 'node-fetch';

const BASE_URL = 'https://gestion-stages-v1.vercel.app';

async function forceSMSCheck() {
  console.log('üîÑ Force v√©rification SMS automatique');
  console.log('====================================');
  
  try {
    // 1. Connexion admin
    console.log('üîê Connexion admin...');
    const loginResponse = await fetch(`${BASE_URL}/api/auth/admin/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        matricule: 'ADMIN001', 
        password: 'admin123' 
      })
    });
    
    const loginData = await loginResponse.json();
    if (!loginData.success || !loginData.token) {
      console.error('‚ùå √âchec de connexion admin');
      return;
    }
    
    const token = loginData.token;
    console.log('‚úÖ Connexion admin r√©ussie');
    
    // 2. Forcer la v√©rification du scheduler
    console.log('\nüîÑ Force v√©rification scheduler...');
    const forceResponse = await fetch(`${BASE_URL}/api/sms/scheduler/force-check`, {
      method: 'POST',
      headers: { 
        'Authorization': `Bearer ${token}`
      }
    });
    
    const forceData = await forceResponse.json();
    console.log(`Status: ${forceResponse.status}`);
    console.log('R√©sultat:', JSON.stringify(forceData, null, 2));
    
    if (forceData.success) {
      console.log('\n‚úÖ V√©rification forc√©e ex√©cut√©e');
      console.log('üì± Si il y avait des SMS en attente, ils ont √©t√© trait√©s');
    } else {
      console.log('‚ùå √âchec v√©rification forc√©e');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

forceSMSCheck();
