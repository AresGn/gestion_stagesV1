/**
 * Script de test pour v√©rifier le syst√®me de notifications admin
 * Phase 3 : V√©rification du tableau de bord d'administration
 */

import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';

// Couleurs pour les logs
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function testAdminNotificationSystem() {
  log('\nüß™ PHASE 3 : TEST DU SYST√àME DE NOTIFICATIONS ADMIN', 'bold');
  log('=' .repeat(60), 'blue');

  try {
    // Test 1: V√©rifier les endpoints API
    log('\nüìã 1. V√âRIFICATION DES ENDPOINTS API', 'blue');
    
    // Test de l'endpoint de cr√©ation de notification
    log('   ‚Ä¢ Test endpoint POST /api/admin/notifications...', 'yellow');
    
    const testPayload = {
      destinataire: {
        type: 'tous',
        id: null
      },
      titre: 'Test Syst√®me Admin',
      message: 'Test automatique du syst√®me de notifications admin'
    };

    // Note: Ce test n√©cessite un token admin valide
    log('   ‚ö†Ô∏è  N√©cessite un token admin valide pour test complet', 'yellow');
    
    // Test 2: V√©rifier la structure des donn√©es
    log('\nüìä 2. V√âRIFICATION DE LA STRUCTURE DES DONN√âES', 'blue');
    
    const requiredFields = ['destinataire', 'titre', 'message'];
    const payloadValid = requiredFields.every(field => testPayload.hasOwnProperty(field));
    
    if (payloadValid) {
      log('   ‚úÖ Structure du payload valide', 'green');
    } else {
      log('   ‚ùå Structure du payload invalide', 'red');
    }

    // Test 3: V√©rifier les types de destinataires
    log('\nüë• 3. V√âRIFICATION DES TYPES DE DESTINATAIRES', 'blue');
    
    const supportedTypes = ['etudiant', 'filiere', 'tous'];
    const typeValid = supportedTypes.includes(testPayload.destinataire.type);
    
    if (typeValid) {
      log('   ‚úÖ Type de destinataire support√©: ' + testPayload.destinataire.type, 'green');
    } else {
      log('   ‚ùå Type de destinataire non support√©', 'red');
    }

    // Test 4: V√©rifier les fili√®res disponibles
    log('\nüéì 4. V√âRIFICATION DES FILI√àRES DISPONIBLES', 'blue');
    
    const filieres = [
      { id: 1, nom: 'GEI/EE' },
      { id: 2, nom: 'GEI/IT' },
      { id: 3, nom: 'GE/ER' },
      { id: 4, nom: 'GMP' },
      { id: 5, nom: 'MSY/MI' },
      { id: 6, nom: 'ER/SE' },
      { id: 7, nom: 'GC/A' },
      { id: 8, nom: 'GC/B' },
      { id: 9, nom: 'MSY/MA' },
      { id: 10, nom: 'GE/FC' }
    ];

    log(`   ‚úÖ ${filieres.length} fili√®res configur√©es`, 'green');
    filieres.forEach(filiere => {
      log(`      - ${filiere.nom} (ID: ${filiere.id})`, 'reset');
    });

    // Test 5: V√©rifier la validation des champs
    log('\n‚úÖ 5. V√âRIFICATION DE LA VALIDATION', 'blue');
    
    const validationTests = [
      { field: 'titre', value: testPayload.titre, required: true },
      { field: 'message', value: testPayload.message, required: true },
      { field: 'destinataire.type', value: testPayload.destinataire.type, required: true }
    ];

    let validationPassed = true;
    validationTests.forEach(test => {
      if (test.required && (!test.value || test.value.trim() === '')) {
        log(`   ‚ùå Champ requis manquant: ${test.field}`, 'red');
        validationPassed = false;
      } else {
        log(`   ‚úÖ Champ valide: ${test.field}`, 'green');
      }
    });

    // R√©sum√©
    log('\nüìã R√âSUM√â DES TESTS', 'bold');
    log('=' .repeat(40), 'blue');
    
    if (payloadValid && typeValid && validationPassed) {
      log('‚úÖ Tous les tests de structure passent', 'green');
      log('‚úÖ Le syst√®me admin est pr√™t pour les tests en conditions r√©elles', 'green');
    } else {
      log('‚ùå Certains tests ont √©chou√©', 'red');
    }

    // Instructions pour les tests manuels
    log('\nüéØ INSTRUCTIONS POUR LES TESTS MANUELS', 'bold');
    log('=' .repeat(50), 'blue');
    log('1. Connectez-vous au dashboard admin', 'yellow');
    log('2. Allez dans l\'onglet "Notifications"', 'yellow');
    log('3. Testez l\'envoi √† un √©tudiant sp√©cifique', 'yellow');
    log('4. Testez l\'envoi √† une fili√®re', 'yellow');
    log('5. Testez l\'envoi √† tous les √©tudiants', 'yellow');
    log('6. V√©rifiez l\'historique des notifications', 'yellow');

    return true;

  } catch (error) {
    log(`‚ùå Erreur lors des tests: ${error.message}`, 'red');
    return false;
  }
}

// Fonction pour tester la connectivit√© API
async function testAPIConnectivity() {
  log('\nüåê TEST DE CONNECTIVIT√â API', 'blue');
  
  try {
    const response = await fetch(`${API_BASE_URL}/api/health`, {
      method: 'GET',
      timeout: 5000
    });
    
    if (response.ok) {
      log('‚úÖ API accessible', 'green');
      return true;
    } else {
      log(`‚ö†Ô∏è  API r√©pond avec le statut: ${response.status}`, 'yellow');
      return false;
    }
  } catch (error) {
    log(`‚ùå API non accessible: ${error.message}`, 'red');
    log('   Assurez-vous que le serveur backend est d√©marr√©', 'yellow');
    return false;
  }
}

// Ex√©cution des tests
async function runTests() {
  log('üöÄ D√âMARRAGE DES TESTS DU SYST√àME ADMIN', 'bold');
  
  const apiConnected = await testAPIConnectivity();
  const adminTestsPassed = await testAdminNotificationSystem();
  
  log('\n' + '='.repeat(60), 'blue');
  
  if (apiConnected && adminTestsPassed) {
    log('üéâ TOUS LES TESTS SONT PASS√âS !', 'green');
    log('Le syst√®me admin est pr√™t pour les tests en conditions r√©elles.', 'green');
  } else {
    log('‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â', 'yellow');
    log('V√©rifiez les erreurs ci-dessus avant de continuer.', 'yellow');
  }
  
  log('\nüîÑ PROCHAINE √âTAPE: Phase 4 - Test de r√©ception PWA par les √©tudiants', 'blue');
}

// Ex√©cuter si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  runTests();
}

export { testAdminNotificationSystem, testAPIConnectivity };
